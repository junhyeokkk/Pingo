import 'package:flutter/material.dart';
import 'package:pingo_front/_core/utils/logger.dart';
import 'package:pingo_front/data/models/chat_model/chat_room.dart';
import 'package:pingo_front/data/view_models/chat_view_model/chat_room_view_model.dart';
import 'package:pingo_front/ui/pages/chat_page/chat_msg2_page.dart';
import 'package:pingo_front/ui/widgets/custom_image.dart';

class ChatRoomList extends StatefulWidget {
  final Map<String, ChatRoom> chatList;
  final String myUserNo;
  final String searchQuery;

  const ChatRoomList(this.chatList, this.myUserNo, this.searchQuery,
      {super.key});

  @override
  State<ChatRoomList> createState() => _ChatMessageListState();
}

class _ChatMessageListState extends State<ChatRoomList> {
  @override
  Widget build(BuildContext context) {
    final filterUsers = widget.chatList.entries.expand((entry) {
      final chat = entry.value;
      final roomId = entry.key;
      return widget.searchQuery.isEmpty
          ? chat.chatUser
          : chat.chatUser
              .where((user) =>
                  user.userName != null &&
                  user.userName!.toLowerCase().contains(
                        widget.searchQuery.toLowerCase(),
                      ))
              .toList(); // Îã§ ÏÜåÎ¨∏ÏûêÎ°ú Î∞îÍ∂àÏÑú containÍ∞í ÌôïÏù∏ÌïòÍ∏∞
    });

    logger.i(filterUsers.length);

    return Container(
      width: double.infinity,
      height: 500, // ‚ô¨ ÎÇòÏ§ëÏóê ÎçîÎØ∏ ÎÑ£Í≥† ÎÜíÏù¥ ÏàòÏ†ï
      color: Colors.white,
      child: SingleChildScrollView(
        // Ï†ÑÏ≤¥ ÌéòÏù¥ÏßÄ Ïä§ÌÅ¨Î°§ Í∞ÄÎä•
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.all(4.0), // ÌéòÏù¥ÏßÄ Ï¢åÏö∞ Ïó¨Î∞±
              child: Text(
                'ÎÇòÏùò Ï±ÑÌåÖ',
                style: TextStyle(
                  fontSize: 12, // ÌÅ¨Í∏∞ ÏàòÏ†ï
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            SizedBox(height: 10),
            // Map Ïù¥ÎùºÏÑú ÌéºÏπòÍ∏∞
            // expend : Î¶¨Ïä§Ìä∏ ÏïàÏùò ÏöîÏÜåÎ•º ÌïòÎÇòÏùò Î¶¨Ïä§Ìä∏Î°ú ÌéºÏ≥êÏ§å

            widget.chatList.isEmpty //
                ? SizedBox(
                    width: MediaQuery.of(context).size.width,
                    child: Center(
                      child: Text(
                        'ÌòÑÏû¨ ÎåÄÌôîÏ§ëÏù∏ Ï±ÑÌåÖÏù¥ ÏóÜÏäµÎãàÎã§',
                        style: TextStyle(fontSize: 16),
                      ),
                    ),
                  ) //
                : filterUsers.isNotEmpty
                    ? Column(
                        children: [
                          ...filterUsers.map((user) {
                            ChatRoom? room =
                                widget.chatList[user.roomId]; // ?? null Ï†úÍ±∞
                            return _chatList(
                              context,
                              user.imageUrl ?? '',
                              user.userName ?? '',
                              room?.lastMessage ?? '',
                              user.roomId ?? '',
                              widget.myUserNo,
                            );
                          })
                        ],
                      )
                    : SizedBox(
                        width: MediaQuery.of(context).size.width,
                        child: Center(
                          child: Text(
                            'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§',
                            style: TextStyle(fontSize: 16),
                          ),
                        ),
                      ),
          ],
        ),
      ),
    );
  }

  Widget _chatList(BuildContext context, String imgUrl, String userName,
      String lastMessage, String roomId, String myUserNo) {
    return ListTile(
        contentPadding: EdgeInsets.symmetric(horizontal: 4.0),
        leading: CircleAvatar(
          backgroundImage: CustomImage().provider(imgUrl),
          radius: 28, // Í∏∞Î≥∏ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
        ),
        title: Text(userName),
        subtitle: Text(lastMessage),
        trailing: Icon(Icons.play_arrow),
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => ChatMsg2Page(
                  chatRoomName: userName, roomId: roomId, myUserNo: myUserNo),
              settings: RouteSettings(name: 'chat_msg_body'), // üî• Ïó¨Í∏∞ Ï∂îÍ∞Ä!
            ),
          );
        });
  }
}

// Î™®Îç∏
